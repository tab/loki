{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>SSO (Single Sign-On) service that provides user authentication functionality using <code>Smart-ID</code> and <code>Mobile-ID</code>. It integrates with SK ID Solutions APIs and manages user roles, permissions, and scopes.</p> <p>Designed to be easily integrated into microservices architectures and provides logging and telemetry for monitoring.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Create and update user accounts, with role and scope assignments</li> <li>Generate and validate JWT tokens</li> <li>Authenticate users via <code>Smart-ID</code> and <code>Mobile-ID</code> through SK ID Solutions provider APIs</li> <li>Comprehensive logging and telemetry support (OpenTelemetry) for easier monitoring and tracing.</li> <li>Easily integrate into a microservices architecture</li> </ul>"},{"location":"#contents","title":"Contents","text":"<ul> <li>Repositories</li> <li>Installation</li> <li>Certificates</li> <li>Usage</li> </ul>"},{"location":"certificates/","title":"Certificates and keys","text":""},{"location":"certificates/#generating-jwt-signing-key-pair","title":"Generating JWT Signing Key pair","text":"<p>Loki uses JWT (JSON Web Tokens) for authentication.</p> <p>To generate a signing key for JWT, you can use the following command:</p> <pre><code>openssl genrsa -out certs/jwt/private.key 4096\n</code></pre> <p>To generate the public key from the private key, use:</p> <pre><code>openssl rsa -in certs/jwt/private.key -pubout -out certs/jwt/public.key\n</code></pre>"},{"location":"certificates/#generating-certificates-for-mtls","title":"Generating Certificates for mTLS","text":"<p>For mTLS (mutual TLS), both the server and client need certificates. The process involves:</p> <ul> <li>Creating a Certificate Authority (CA)</li> <li>Creating server certificates signed by the CA</li> <li>Creating client certificates signed by the CA</li> </ul>"},{"location":"certificates/#generate-the-certificate-authority-ca","title":"Generate the Certificate Authority (CA)","text":"<p>Generate a private key for your CA</p> <pre><code>openssl genrsa -out certs/ca.key 4096\nopenssl req -new -x509 -key certs/ca.key -sha256 -subj '/CN=Loki CA' -out certs/ca.pem -days 3650\n</code></pre>"},{"location":"certificates/#generate-the-server-certificate","title":"Generate the Server Certificate","text":""},{"location":"certificates/#generate-server-private-key","title":"Generate server private key","text":"<pre><code>openssl genrsa -out certs/server.key 4096\n</code></pre>"},{"location":"certificates/#create-server-certificate-signing-request-csr","title":"Create server Certificate Signing Request (CSR)","text":"<pre><code>openssl req -new -key certs/server.key -out certs/server.csr -config &lt;(\ncat &lt;&lt;-EOF\n[req]\ndefault_bits = 4096\nprompt = no\ndefault_md = sha256\nreq_extensions = req_ext\ndistinguished_name = dn\n\n[dn]\nCN = loki-backend\n\n[req_ext]\nsubjectAltName = @alt_names\n\n[alt_names]\nDNS.1 = localhost\nDNS.2 = backend\nIP.1 = 127.0.0.1\nIP.2 = 0.0.0.0\nEOF\n)\n</code></pre>"},{"location":"certificates/#sign-the-server-certificate-with-ca","title":"Sign the server certificate with CA","text":"<pre><code>openssl x509 -req -in certs/server.csr -CA certs/ca.pem -CAkey certs/ca.key -CAcreateserial -out certs/server.pem -days 825 -sha256 -extfile &lt;(\ncat &lt;&lt;-EOF\nsubjectAltName = @alt_names\n\n[alt_names]\nDNS.1 = localhost\nDNS.2 = backend\nIP.1 = 127.0.0.1\nIP.2 = 0.0.0.0\nEOF\n)\n</code></pre>"},{"location":"certificates/#generate-the-client-certificate","title":"Generate the Client Certificate","text":"<p>Generate client private key</p> <pre><code>openssl genrsa -out certs/client.key 4096\n</code></pre>"},{"location":"certificates/#create-client-certificate-signing-request-csr","title":"Create client Certificate Signing Request (CSR)","text":"<pre><code>openssl req -new -key certs/client.key -out certs/client.csr -config &lt;(\ncat &lt;&lt;-EOF\n[req]\ndefault_bits = 4096\nprompt = no\ndefault_md = sha256\ndistinguished_name = dn\n\n[dn]\nCN = loki-backoffice\nEOF\n)\n</code></pre>"},{"location":"certificates/#sign-the-client-certificate-with-ca","title":"Sign the client certificate with CA","text":"<pre><code>openssl x509 -req -in certs/client.csr -CA certs/ca.pem -CAkey certs/ca.key -CAcreateserial -out certs/client.pem -days 825 -sha256\n</code></pre>"},{"location":"certificates/#verify-the-certificates","title":"Verify the certificates","text":"<pre><code>openssl verify -CAfile certs/ca.pem certs/server.pem\n</code></pre> <pre><code>openssl verify -CAfile certs/ca.pem certs/client.pem\n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<p>Before starting the Loki application, you must have the loki-infrastructure running:</p> <pre><code>git clone git@github.com/tab/loki-infrastructure.git\ncd loki-infrastructure\n\ndocker-compose up\n</code></pre>"},{"location":"installation/#environment-variables","title":"Environment Variables","text":"<p>Use <code>.env</code> files (e.g., <code>.env.development</code>) or provide environment variables for:</p> <ul> <li><code>DATABASE_DSN</code> for PostgreSQL</li> <li><code>REDIS_URI</code> for Redis</li> <li><code>SMART_ID_API_URL</code>, <code>MOBILE_ID_API_URL</code> and corresponding relying on party credentials</li> <li><code>TELEMETRY_URI</code> for OpenTelemetry</li> </ul> <p>Example <code>.env.development</code> file:</p> <pre><code>DATABASE_DSN=postgres://postgres:postgres@localhost:5432/loki_development?sslmode=disable\nREDIS_URI=redis://localhost:6379/0\nSMART_ID_API_URL=https://sid.demo.sk.ee/smart-id-rp/v2/\nMOBILE_ID_API_URL=https://tsp.demo.sk.ee/mid-api/\nTELEMETRY_URI=http://localhost:4317\n</code></pre>"},{"location":"installation/#certificate-and-key-generation","title":"Certificate and Key Generation","text":"<p>Before running the services, you need to generate certificates for mTLS and keys for JWT signing.</p> <p>For more detailed information on certificates, see Certificates Documentation.</p>"},{"location":"installation/#database-migrations","title":"Database Migrations","text":"<p>Run the following command to apply database migrations:</p> <pre><code>GO_ENV=development make db:drop db:create db:migrate\n</code></pre>"},{"location":"installation/#run-application","title":"Run application","text":"<pre><code>docker-compose build\ndocker-compose up\n</code></pre>"},{"location":"installation/#check-health-status","title":"Check health status","text":"<pre><code>curl -X GET http://localhost:8080/live\n</code></pre> <pre><code>curl -X GET http://localhost:8080/ready\n</code></pre>"},{"location":"installation/#related-repositories","title":"Related Repositories","text":"<p>The Loki ecosystem consists of the following repositories:</p> <ul> <li>Loki Infrastructure - Infrastructure setup for the Loki ecosystem</li> <li>Loki Backoffice - Backoffice service</li> <li>Loki Proto - Protocol buffer definitions</li> <li>Loki Frontend - Frontend application</li> <li>Smart-ID Client - Smart-ID client used for authentication</li> <li>Mobile-ID Client - Mobile-ID client used for authentication</li> </ul>"},{"location":"repositories/","title":"Related repositories","text":"<p>The Loki ecosystem consists of the following repositories:</p> <ul> <li>Loki Infrastructure - Infrastructure setup for the Loki ecosystem</li> <li>Loki Backoffice - Backoffice service</li> <li>Loki Proto - Protocol buffer definitions</li> <li>Loki Frontend - Frontend application</li> <li>Smart-ID Client - Smart-ID client used for authentication</li> <li>Mobile-ID Client - Mobile-ID client used for authentication</li> </ul>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#api-documentation","title":"API Documentation","text":"<p>Swagger file is available at api/swagger.yaml</p>"},{"location":"usage/#endpoints","title":"Endpoints","text":""},{"location":"usage/#smart-id","title":"Smart-ID","text":""},{"location":"usage/#create-smart-id-session","title":"Create smart-id session","text":"<ul> <li><code>POST /api/auth/smart_id</code></li> </ul> <p>body:</p> <pre><code>{\n  \"country\": \"EE\",\n  \"personal_code\": \"50001029996\"\n}\n</code></pre> <p>example:</p> <pre><code>curl -X POST http://localhost:8080/api/auth/smart_id \\\n  -H \"Content-Type: application/json\" \\\n  -H \"X-Request-ID: 4de2f35d-7e30-466e-923b-aab80a424b34\" \\\n  -H \"X-Trace-ID: f4c28fec-07fd-415f-900c-37be7fb705fa\" \\\n  -d '{ \"country\": \"EE\", \"personal_code\": \"50001029996\" }'\n</code></pre> <p>response:</p> <pre><code>{\n  \"id\": \"a658556f-f2ec-42f5-86dc-2665f011d5f7\",\n  \"code\": \"8317\"\n}\n</code></pre>"},{"location":"usage/#fetch-smart-id-session-status","title":"Fetch smart-id session status","text":"<ul> <li><code>GET /api/sessions/{id}</code></li> </ul> <p>example:</p> <pre><code>curl -X GET http://localhost:8080/api/sessions/a658556f-f2ec-42f5-86dc-2665f011d5f7 \\\n  -H \"Content-Type: application/json\" \\\n  -H \"X-Request-ID: 7877796b-54b9-4737-a44f-0b0bb4f5eb88\" \\\n  -H \"X-Trace-ID: f4c28fec-07fd-415f-900c-37be7fb705fa\"\n</code></pre> <p>response:</p> <pre><code>{\n  \"id\": \"a658556f-f2ec-42f5-86dc-2665f011d5f7\",\n  \"status\": \"SUCCESS\"\n}\n</code></pre>"},{"location":"usage/#complete-smart-id-session","title":"Complete smart-id session","text":"<ul> <li><code>POST /api/sessions/{id}</code></li> </ul> <p>example:</p> <pre><code>curl -X POST http://localhost:8080/api/sessions/a658556f-f2ec-42f5-86dc-2665f011d5f7 \\\n  -H \"Content-Type: application/json\" \\\n  -H \"X-Request-ID: 2aeb8bca-8af0-498f-8136-c179d3a6f1bd\" \\\n  -H \"X-Trace-ID: f4c28fec-07fd-415f-900c-37be7fb705fa\"\n</code></pre> <p>response:</p> <pre><code>{\n  \"id\": \"f4c28fec-07fd-415f-900c-37be7fb705fe\",\n  \"identity_number\": \"PNOEE-50001029996\",\n  \"personal_code\": \"50001029996\",\n  \"first_name\": \"TESTNUMBER\",\n  \"last_name\": \"ADULT\",\n  \"access_token\": \"ey-Access-Token...\",\n  \"refresh_token\": \"ey-Refresh-Token...\"\n}\n</code></pre>"},{"location":"usage/#mobile-id","title":"Mobile-ID","text":""},{"location":"usage/#create-mobile-id-session","title":"Create mobile-id session","text":"<ul> <li><code>POST /api/auth/mobile_id</code></li> </ul> <p>body:</p> <pre><code>{\n  \"locale\": \"ENG\",\n  \"phone_number\": \"+37268000769\",\n  \"personal_code\": \"60001017869\"\n}\n</code></pre> <p>response:</p> <pre><code>{\n  \"id\": \"a658556f-f2ec-42f5-86dc-2665f011d5f7\",\n  \"code\": \"8317\"\n}\n</code></pre>"},{"location":"usage/#fetch-mobile-id-session-status","title":"Fetch mobile-id session status","text":"<ul> <li><code>GET /api/sessions/{id}</code></li> </ul> <p>response:</p> <pre><code>{\n  \"id\": \"a658556f-f2ec-42f5-86dc-2665f011d5f7\",\n  \"status\": \"SUCCESS\"\n}\n</code></pre>"},{"location":"usage/#complete-mobile-id-session","title":"Complete mobile-id session","text":"<ul> <li><code>POST /api/sessions/{id}</code></li> </ul> <p>response:</p> <pre><code>{\n  \"id\": \"f4c28fec-07fd-415f-900c-37be7fb705fe\",\n  \"identity_number\": \"PNOEE-60001017869\",\n  \"personal_code\": \"60001017869\",\n  \"first_name\": \"EID2016\",\n  \"last_name\": \"TESTNUMBER\",\n  \"access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"refresh_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\n}\n</code></pre>"},{"location":"usage/#user","title":"User","text":""},{"location":"usage/#fetch-user-information","title":"Fetch user information","text":"<ul> <li><code>GET /api/me</code></li> </ul> <p>example:</p> <pre><code>curl -X GET http://localhost:8080/api/me \\\n  -H \"Authorization: Bearer &lt;ACCESS_TOKEN&gt;\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"X-Request-ID: 4844c624-4c3f-4cdf-96dd-01bc53915e02\" \\\n  -H \"X-Trace-ID: 0cbc1fe0-c29c-44d5-84a1-4ec5ddb9e08f\"\n</code></pre> <p>response:</p> <pre><code>{\n  \"id\": \"f4c28fec-07fd-415f-900c-37be7fb705fe\",\n  \"identity_number\": \"PNOEE-50001029996\",\n  \"personal_code\": \"50001029996\",\n  \"first_name\": \"TESTNUMBER\",\n  \"last_name\": \"ADULT\"\n}\n</code></pre>"},{"location":"usage/#tokens","title":"Tokens","text":""},{"location":"usage/#refresh-access-token-using-refresh-token","title":"Refresh access token using refresh token","text":"<ul> <li><code>POST /api/tokens/refresh</code></li> </ul> <p>body:</p> <pre><code>{\n  \"refresh_token\": \"ey-Refresh-Token...\"\n}\n</code></pre> <p>response:</p> <pre><code>{\n  \"access_token\": \"ey-New-Access-Token...\",\n  \"refresh_token\": \"ey-New-Refresh-Token...\"\n}\n</code></pre> <p>example:</p> <pre><code>curl -X POST http://localhost:8080/api/tokens/refresh \\\n  -H \"Content-Type: application/json\" \\\n  -H \"X-Request-ID: 83bc86e9-1a29-46a8-b358-6db39ab7c2f5\" \\\n  -H \"X-Trace-ID: 754cfd21-69b2-436a-af5f-737932cfd874\"\n  -d '{ \"refresh_token\": \"&lt;REFRESH_TOKEN&gt;\" }'\n</code></pre>"},{"location":"usage/#jwt-access-token-examples","title":"JWT access token examples","text":""},{"location":"usage/#admin","title":"Admin","text":"<pre><code>{\n  \"exp\": 1734879499,\n  \"jti\": \"PNOEE-50001029996\",\n  \"roles\": [\n    \"admin\",\n    \"user\"\n  ],\n  \"permissions\": [\n    \"read:users\",\n    \"write:users\",\n    \"write:self\",\n    \"read:self\"\n  ],\n  \"scope\": [\n    \"self-service\",\n    \"sso-service\"\n  ]\n}\n</code></pre>"},{"location":"usage/#manager","title":"Manager","text":"<pre><code>{\n  \"exp\": 1734879550,\n  \"jti\": \"PNOBE-00010299944\",\n  \"roles\": [\n    \"manager\",\n    \"user\"\n  ],\n  \"permissions\": [\n    \"read:users\",\n    \"write:self\",\n    \"read:self\"\n  ],\n  \"scope\": [\n    \"self-service\",\n    \"sso-service\"\n  ]\n}\n</code></pre>"},{"location":"usage/#user_1","title":"User","text":"<pre><code>{\n  \"exp\": 1734879566,\n  \"jti\": \"PNOEE-60001017869\",\n  \"roles\": [\n    \"user\"\n  ],\n  \"permissions\": [\n    \"write:self\",\n    \"read:self\"\n  ],\n  \"scope\": [\n    \"self-service\"\n  ]\n}\n</code></pre>"},{"location":"usage/#jwt-refresh-token-example","title":"JWT refresh token example","text":"<pre><code>{\n  \"exp\": 1734454731,\n  \"jti\": \"PNOEE-50001029996\"\n}\n</code></pre>"}]}