// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/workers/mobileid.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/workers/mobileid.go -destination=internal/app/workers/mobileid_mock.go -package=workers
//

// Package workers is a generated GoMock package.
package workers

import (
	context "context"
	models "loki/internal/app/models"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockMobileIdWorker is a mock of MobileIdWorker interface.
type MockMobileIdWorker struct {
	ctrl     *gomock.Controller
	recorder *MockMobileIdWorkerMockRecorder
	isgomock struct{}
}

// MockMobileIdWorkerMockRecorder is the mock recorder for MockMobileIdWorker.
type MockMobileIdWorkerMockRecorder struct {
	mock *MockMobileIdWorker
}

// NewMockMobileIdWorker creates a new mock instance.
func NewMockMobileIdWorker(ctrl *gomock.Controller) *MockMobileIdWorker {
	mock := &MockMobileIdWorker{ctrl: ctrl}
	mock.recorder = &MockMobileIdWorkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMobileIdWorker) EXPECT() *MockMobileIdWorkerMockRecorder {
	return m.recorder
}

// Perform mocks base method.
func (m *MockMobileIdWorker) Perform(ctx context.Context, id uuid.UUID, traceId string) *models.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Perform", ctx, id, traceId)
	ret0, _ := ret[0].(*models.Session)
	return ret0
}

// Perform indicates an expected call of Perform.
func (mr *MockMobileIdWorkerMockRecorder) Perform(ctx, id, traceId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Perform", reflect.TypeOf((*MockMobileIdWorker)(nil).Perform), ctx, id, traceId)
}
