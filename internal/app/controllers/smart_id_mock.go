// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/controllers/smart_id.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/controllers/smart_id.go -destination=internal/app/controllers/smart_id_mock.go -package=controllers
//

// Package controllers is a generated GoMock package.
package controllers

import (
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSmartIdController is a mock of SmartIdController interface.
type MockSmartIdController struct {
	ctrl     *gomock.Controller
	recorder *MockSmartIdControllerMockRecorder
	isgomock struct{}
}

// MockSmartIdControllerMockRecorder is the mock recorder for MockSmartIdController.
type MockSmartIdControllerMockRecorder struct {
	mock *MockSmartIdController
}

// NewMockSmartIdController creates a new mock instance.
func NewMockSmartIdController(ctrl *gomock.Controller) *MockSmartIdController {
	mock := &MockSmartIdController{ctrl: ctrl}
	mock.recorder = &MockSmartIdControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSmartIdController) EXPECT() *MockSmartIdControllerMockRecorder {
	return m.recorder
}

// CreateSession mocks base method.
func (m *MockSmartIdController) CreateSession(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateSession", w, r)
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockSmartIdControllerMockRecorder) CreateSession(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockSmartIdController)(nil).CreateSession), w, r)
}
