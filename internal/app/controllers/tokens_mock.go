// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/controllers/tokens.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/controllers/tokens.go -destination=internal/app/controllers/tokens_mock.go -package=controllers
//

// Package controllers is a generated GoMock package.
package controllers

import (
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTokensController is a mock of TokensController interface.
type MockTokensController struct {
	ctrl     *gomock.Controller
	recorder *MockTokensControllerMockRecorder
	isgomock struct{}
}

// MockTokensControllerMockRecorder is the mock recorder for MockTokensController.
type MockTokensControllerMockRecorder struct {
	mock *MockTokensController
}

// NewMockTokensController creates a new mock instance.
func NewMockTokensController(ctrl *gomock.Controller) *MockTokensController {
	mock := &MockTokensController{ctrl: ctrl}
	mock.recorder = &MockTokensControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokensController) EXPECT() *MockTokensControllerMockRecorder {
	return m.recorder
}

// Refresh mocks base method.
func (m *MockTokensController) Refresh(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Refresh", w, r)
}

// Refresh indicates an expected call of Refresh.
func (mr *MockTokensControllerMockRecorder) Refresh(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockTokensController)(nil).Refresh), w, r)
}
