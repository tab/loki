// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/controllers/session.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/controllers/session.go -destination=internal/app/controllers/session_mock.go -package=controllers
//

// Package controllers is a generated GoMock package.
package controllers

import (
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSessionController is a mock of SessionController interface.
type MockSessionController struct {
	ctrl     *gomock.Controller
	recorder *MockSessionControllerMockRecorder
	isgomock struct{}
}

// MockSessionControllerMockRecorder is the mock recorder for MockSessionController.
type MockSessionControllerMockRecorder struct {
	mock *MockSessionController
}

// NewMockSessionController creates a new mock instance.
func NewMockSessionController(ctrl *gomock.Controller) *MockSessionController {
	mock := &MockSessionController{ctrl: ctrl}
	mock.recorder = &MockSessionControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionController) EXPECT() *MockSessionControllerMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockSessionController) Authenticate(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Authenticate", w, r)
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockSessionControllerMockRecorder) Authenticate(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockSessionController)(nil).Authenticate), w, r)
}

// GetStatus mocks base method.
func (m *MockSessionController) GetStatus(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetStatus", w, r)
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockSessionControllerMockRecorder) GetStatus(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockSessionController)(nil).GetStatus), w, r)
}
