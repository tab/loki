// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/services/authentication.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/services/authentication.go -destination=internal/app/services/authentication_mock.go -package=services
//

// Package services is a generated GoMock package.
package services

import (
	context "context"
	models "loki/internal/app/models"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAuthentication is a mock of Authentication interface.
type MockAuthentication struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticationMockRecorder
	isgomock struct{}
}

// MockAuthenticationMockRecorder is the mock recorder for MockAuthentication.
type MockAuthenticationMockRecorder struct {
	mock *MockAuthentication
}

// NewMockAuthentication creates a new mock instance.
func NewMockAuthentication(ctrl *gomock.Controller) *MockAuthentication {
	mock := &MockAuthentication{ctrl: ctrl}
	mock.recorder = &MockAuthenticationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthentication) EXPECT() *MockAuthenticationMockRecorder {
	return m.recorder
}

// Complete mocks base method.
func (m *MockAuthentication) Complete(ctx context.Context, id string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Complete", ctx, id)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Complete indicates an expected call of Complete.
func (mr *MockAuthenticationMockRecorder) Complete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Complete", reflect.TypeOf((*MockAuthentication)(nil).Complete), ctx, id)
}
