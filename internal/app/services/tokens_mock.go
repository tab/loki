// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/services/tokens.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/services/tokens.go -destination=internal/app/services/tokens_mock.go -package=services
//

// Package services is a generated GoMock package.
package services

import (
	context "context"
	models "loki/internal/app/models"
	serializers "loki/internal/app/serializers"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTokens is a mock of Tokens interface.
type MockTokens struct {
	ctrl     *gomock.Controller
	recorder *MockTokensMockRecorder
	isgomock struct{}
}

// MockTokensMockRecorder is the mock recorder for MockTokens.
type MockTokensMockRecorder struct {
	mock *MockTokens
}

// NewMockTokens creates a new mock instance.
func NewMockTokens(ctrl *gomock.Controller) *MockTokens {
	mock := &MockTokens{ctrl: ctrl}
	mock.recorder = &MockTokensMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokens) EXPECT() *MockTokensMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *MockTokens) Generate(ctx context.Context, user *models.User) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate", ctx, user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Generate indicates an expected call of Generate.
func (mr *MockTokensMockRecorder) Generate(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockTokens)(nil).Generate), ctx, user)
}

// Refresh mocks base method.
func (m *MockTokens) Refresh(ctx context.Context, refreshToken string) (*serializers.UserSerializer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh", ctx, refreshToken)
	ret0, _ := ret[0].(*serializers.UserSerializer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Refresh indicates an expected call of Refresh.
func (mr *MockTokensMockRecorder) Refresh(ctx, refreshToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockTokens)(nil).Refresh), ctx, refreshToken)
}
