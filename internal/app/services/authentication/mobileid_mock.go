// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/services/authentication/mobileid.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/services/authentication/mobileid.go -destination=internal/app/services/authentication/mobileid_mock.go -package=authentication
//

// Package authentication is a generated GoMock package.
package authentication

import (
	context "context"
	models "loki/internal/app/models"
	dto "loki/internal/app/models/dto"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMobileIdProvider is a mock of MobileIdProvider interface.
type MockMobileIdProvider struct {
	ctrl     *gomock.Controller
	recorder *MockMobileIdProviderMockRecorder
	isgomock struct{}
}

// MockMobileIdProviderMockRecorder is the mock recorder for MockMobileIdProvider.
type MockMobileIdProviderMockRecorder struct {
	mock *MockMobileIdProvider
}

// NewMockMobileIdProvider creates a new mock instance.
func NewMockMobileIdProvider(ctrl *gomock.Controller) *MockMobileIdProvider {
	mock := &MockMobileIdProvider{ctrl: ctrl}
	mock.recorder = &MockMobileIdProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMobileIdProvider) EXPECT() *MockMobileIdProviderMockRecorder {
	return m.recorder
}

// CreateSession mocks base method.
func (m *MockMobileIdProvider) CreateSession(ctx context.Context, params dto.CreateMobileIdSessionRequest) (*models.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", ctx, params)
	ret0, _ := ret[0].(*models.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockMobileIdProviderMockRecorder) CreateSession(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockMobileIdProvider)(nil).CreateSession), ctx, params)
}
