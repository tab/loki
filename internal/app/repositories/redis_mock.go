// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/repositories/redis.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/repositories/redis.go -destination=internal/app/repositories/redis_mock.go -package=repositories
//

// Package repositories is a generated GoMock package.
package repositories

import (
	context "context"
	models "loki/internal/app/models"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockRedis is a mock of Redis interface.
type MockRedis struct {
	ctrl     *gomock.Controller
	recorder *MockRedisMockRecorder
	isgomock struct{}
}

// MockRedisMockRecorder is the mock recorder for MockRedis.
type MockRedisMockRecorder struct {
	mock *MockRedis
}

// NewMockRedis creates a new mock instance.
func NewMockRedis(ctrl *gomock.Controller) *MockRedis {
	mock := &MockRedis{ctrl: ctrl}
	mock.recorder = &MockRedisMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedis) EXPECT() *MockRedisMockRecorder {
	return m.recorder
}

// CreateSession mocks base method.
func (m *MockRedis) CreateSession(ctx context.Context, session *models.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", ctx, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockRedisMockRecorder) CreateSession(ctx, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockRedis)(nil).CreateSession), ctx, session)
}

// DeleteSessionByID mocks base method.
func (m *MockRedis) DeleteSessionByID(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSessionByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSessionByID indicates an expected call of DeleteSessionByID.
func (mr *MockRedisMockRecorder) DeleteSessionByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSessionByID", reflect.TypeOf((*MockRedis)(nil).DeleteSessionByID), ctx, id)
}

// FindSessionById mocks base method.
func (m *MockRedis) FindSessionById(ctx context.Context, id uuid.UUID) (*models.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSessionById", ctx, id)
	ret0, _ := ret[0].(*models.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSessionById indicates an expected call of FindSessionById.
func (mr *MockRedisMockRecorder) FindSessionById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSessionById", reflect.TypeOf((*MockRedis)(nil).FindSessionById), ctx, id)
}

// UpdateSession mocks base method.
func (m *MockRedis) UpdateSession(ctx context.Context, session *models.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSession", ctx, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSession indicates an expected call of UpdateSession.
func (mr *MockRedisMockRecorder) UpdateSession(ctx, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSession", reflect.TypeOf((*MockRedis)(nil).UpdateSession), ctx, session)
}
