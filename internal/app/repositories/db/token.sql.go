// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: token.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createToken = `-- name: CreateToken :one
INSERT INTO tokens (user_id, type, value, expires_at)
VALUES ($1, $2, $3, $4)
  RETURNING id, type, value, expires_at
`

type CreateTokenParams struct {
	UserID    uuid.UUID
	Type      TokenType
	Value     string
	ExpiresAt pgtype.Timestamp
}

type CreateTokenRow struct {
	ID        uuid.UUID
	Type      TokenType
	Value     string
	ExpiresAt pgtype.Timestamp
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) (CreateTokenRow, error) {
	row := q.db.QueryRow(ctx, createToken,
		arg.UserID,
		arg.Type,
		arg.Value,
		arg.ExpiresAt,
	)
	var i CreateTokenRow
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Value,
		&i.ExpiresAt,
	)
	return i, err
}

const createTokens = `-- name: CreateTokens :many
INSERT INTO tokens (user_id, type, value, expires_at)
VALUES
  ($1::uuid, 'access_token'::token_type, $2::text, $3::timestamp),
  ($1::uuid, 'refresh_token'::token_type, $4::text, $5::timestamp)
  RETURNING id, type, value, expires_at
`

type CreateTokensParams struct {
	UserID                uuid.UUID
	AccessTokenValue      string
	AccessTokenExpiresAt  pgtype.Timestamp
	RefreshTokenValue     string
	RefreshTokenExpiresAt pgtype.Timestamp
}

type CreateTokensRow struct {
	ID        uuid.UUID
	Type      TokenType
	Value     string
	ExpiresAt pgtype.Timestamp
}

func (q *Queries) CreateTokens(ctx context.Context, arg CreateTokensParams) ([]CreateTokensRow, error) {
	rows, err := q.db.Query(ctx, createTokens,
		arg.UserID,
		arg.AccessTokenValue,
		arg.AccessTokenExpiresAt,
		arg.RefreshTokenValue,
		arg.RefreshTokenExpiresAt,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CreateTokensRow
	for rows.Next() {
		var i CreateTokensRow
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Value,
			&i.ExpiresAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const deleteToken = `-- name: DeleteToken :exec
DELETE FROM tokens WHERE id = $1
`

func (q *Queries) DeleteToken(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteToken, id)
	return err
}

const findTokenById = `-- name: FindTokenById :one
SELECT id, user_id, type, value, expires_at FROM tokens WHERE id = $1
`

type FindTokenByIdRow struct {
	ID        uuid.UUID
	UserID    uuid.UUID
	Type      TokenType
	Value     string
	ExpiresAt pgtype.Timestamp
}

func (q *Queries) FindTokenById(ctx context.Context, id uuid.UUID) (FindTokenByIdRow, error) {
	row := q.db.QueryRow(ctx, findTokenById, id)
	var i FindTokenByIdRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Type,
		&i.Value,
		&i.ExpiresAt,
	)
	return i, err
}

const findTokens = `-- name: FindTokens :many
WITH counter AS (
  SELECT COUNT(*) AS total
  FROM tokens
)
SELECT
  t.id,
  t.user_id,
  t.type,
  t.value,
  t.expires_at,
  u.identity_number,
  counter.total
FROM tokens AS t
  JOIN users AS u ON t.user_id = u.id
  RIGHT JOIN counter ON TRUE
ORDER BY t.created_at DESC LIMIT $1::bigint OFFSET $2::bigint
`

type FindTokensParams struct {
	Limit uint64
	Offset uint64
}

type FindTokensRow struct {
	ID             uuid.UUID
	UserID         uuid.UUID
	Type           TokenType
	Value          string
	ExpiresAt      pgtype.Timestamp
	IdentityNumber string
	Total          uint64
}

func (q *Queries) FindTokens(ctx context.Context, arg FindTokensParams) ([]FindTokensRow, error) {
	rows, err := q.db.Query(ctx, findTokens, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindTokensRow
	for rows.Next() {
		var i FindTokensRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Type,
			&i.Value,
			&i.ExpiresAt,
			&i.IdentityNumber,
			&i.Total,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
