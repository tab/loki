// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: role.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createUserRole = `-- name: CreateUserRole :one
INSERT INTO user_roles (user_id, role_id)
VALUES ($1, $2)
  ON CONFLICT (user_id, role_id) DO UPDATE SET role_id = EXCLUDED.role_id, user_id = EXCLUDED.user_id
RETURNING user_id, role_id
`

type CreateUserRoleParams struct {
	UserID uuid.UUID
	RoleID uuid.UUID
}

type CreateUserRoleRow struct {
	UserID uuid.UUID
	RoleID uuid.UUID
}

func (q *Queries) CreateUserRole(ctx context.Context, arg CreateUserRoleParams) (CreateUserRoleRow, error) {
	row := q.db.QueryRow(ctx, createUserRole, arg.UserID, arg.RoleID)
	var i CreateUserRoleRow
	err := row.Scan(&i.UserID, &i.RoleID)
	return i, err
}

const findRoleByName = `-- name: FindRoleByName :one
SELECT id, name FROM roles WHERE name = $1
`

type FindRoleByNameRow struct {
	ID   uuid.UUID
	Name string
}

func (q *Queries) FindRoleByName(ctx context.Context, name string) (FindRoleByNameRow, error) {
	row := q.db.QueryRow(ctx, findRoleByName, name)
	var i FindRoleByNameRow
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const findUserRoles = `-- name: FindUserRoles :many
SELECT id, name FROM roles WHERE id IN (SELECT role_id FROM user_roles WHERE user_id = $1)
`

type FindUserRolesRow struct {
	ID   uuid.UUID
	Name string
}

func (q *Queries) FindUserRoles(ctx context.Context, userID uuid.UUID) ([]FindUserRolesRow, error) {
	rows, err := q.db.Query(ctx, findUserRoles, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindUserRolesRow
	for rows.Next() {
		var i FindUserRolesRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
