// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: scope.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createUserScope = `-- name: CreateUserScope :one
INSERT INTO user_scopes (user_id, scope_id)
VALUES ($1, $2)
  ON CONFLICT (user_id, scope_id) DO UPDATE SET scope_id = EXCLUDED.scope_id, user_id = EXCLUDED.user_id
RETURNING user_id, scope_id
`

type CreateUserScopeParams struct {
	UserID  uuid.UUID
	ScopeID uuid.UUID
}

type CreateUserScopeRow struct {
	UserID  uuid.UUID
	ScopeID uuid.UUID
}

func (q *Queries) CreateUserScope(ctx context.Context, arg CreateUserScopeParams) (CreateUserScopeRow, error) {
	row := q.db.QueryRow(ctx, createUserScope, arg.UserID, arg.ScopeID)
	var i CreateUserScopeRow
	err := row.Scan(&i.UserID, &i.ScopeID)
	return i, err
}

const findScopeByName = `-- name: FindScopeByName :one
SELECT id, name FROM scopes WHERE name = $1
`

type FindScopeByNameRow struct {
	ID   uuid.UUID
	Name string
}

func (q *Queries) FindScopeByName(ctx context.Context, name string) (FindScopeByNameRow, error) {
	row := q.db.QueryRow(ctx, findScopeByName, name)
	var i FindScopeByNameRow
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const findUserScopes = `-- name: FindUserScopes :many
SELECT id, name FROM scopes WHERE id IN (SELECT scope_id FROM user_scopes WHERE user_id = $1)
`

type FindUserScopesRow struct {
	ID   uuid.UUID
	Name string
}

func (q *Queries) FindUserScopes(ctx context.Context, userID uuid.UUID) ([]FindUserScopesRow, error) {
	rows, err := q.db.Query(ctx, findUserScopes, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindUserScopesRow
	for rows.Next() {
		var i FindUserScopesRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertUserScopeByName = `-- name: UpsertUserScopeByName :one
INSERT INTO user_scopes (user_id, scope_id)
VALUES ($1, (SELECT id FROM scopes WHERE name = $2))
  ON CONFLICT (user_id, scope_id) DO UPDATE SET scope_id = EXCLUDED.scope_id, user_id = EXCLUDED.user_id
RETURNING user_id, scope_id
`

type UpsertUserScopeByNameParams struct {
	UserID uuid.UUID
	Name   string
}

type UpsertUserScopeByNameRow struct {
	UserID  uuid.UUID
	ScopeID uuid.UUID
}

func (q *Queries) UpsertUserScopeByName(ctx context.Context, arg UpsertUserScopeByNameParams) (UpsertUserScopeByNameRow, error) {
	row := q.db.QueryRow(ctx, upsertUserScopeByName, arg.UserID, arg.Name)
	var i UpsertUserScopeByNameRow
	err := row.Scan(&i.UserID, &i.ScopeID)
	return i, err
}
