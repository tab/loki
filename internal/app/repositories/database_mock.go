// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/repositories/database.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/repositories/database.go -destination=internal/app/repositories/database_mock.go -package=repositories
//

// Package repositories is a generated GoMock package.
package repositories

import (
	context "context"
	models "loki/internal/app/models"
	dto "loki/internal/app/models/dto"
	db "loki/internal/app/repositories/db"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
	isgomock struct{}
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockDatabase) CreateUser(ctx context.Context, params db.CreateUserParams) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, params)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockDatabaseMockRecorder) CreateUser(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockDatabase)(nil).CreateUser), ctx, params)
}

// CreateUserRole mocks base method.
func (m *MockDatabase) CreateUserRole(ctx context.Context, params db.CreateUserRoleParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserRole", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserRole indicates an expected call of CreateUserRole.
func (mr *MockDatabaseMockRecorder) CreateUserRole(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserRole", reflect.TypeOf((*MockDatabase)(nil).CreateUserRole), ctx, params)
}

// CreateUserScope mocks base method.
func (m *MockDatabase) CreateUserScope(ctx context.Context, params db.CreateUserScopeParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserScope", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserScope indicates an expected call of CreateUserScope.
func (mr *MockDatabaseMockRecorder) CreateUserScope(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserScope", reflect.TypeOf((*MockDatabase)(nil).CreateUserScope), ctx, params)
}

// CreateUserTokens mocks base method.
func (m *MockDatabase) CreateUserTokens(ctx context.Context, params dto.CreateUserParams) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserTokens", ctx, params)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserTokens indicates an expected call of CreateUserTokens.
func (mr *MockDatabaseMockRecorder) CreateUserTokens(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserTokens", reflect.TypeOf((*MockDatabase)(nil).CreateUserTokens), ctx, params)
}

// FindRoleByName mocks base method.
func (m *MockDatabase) FindRoleByName(ctx context.Context, name string) (*models.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRoleByName", ctx, name)
	ret0, _ := ret[0].(*models.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRoleByName indicates an expected call of FindRoleByName.
func (mr *MockDatabaseMockRecorder) FindRoleByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRoleByName", reflect.TypeOf((*MockDatabase)(nil).FindRoleByName), ctx, name)
}

// FindScopeByName mocks base method.
func (m *MockDatabase) FindScopeByName(ctx context.Context, name string) (*models.Scope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindScopeByName", ctx, name)
	ret0, _ := ret[0].(*models.Scope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindScopeByName indicates an expected call of FindScopeByName.
func (mr *MockDatabaseMockRecorder) FindScopeByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindScopeByName", reflect.TypeOf((*MockDatabase)(nil).FindScopeByName), ctx, name)
}

// FindUserById mocks base method.
func (m *MockDatabase) FindUserById(ctx context.Context, id uuid.UUID) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserById", ctx, id)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserById indicates an expected call of FindUserById.
func (mr *MockDatabaseMockRecorder) FindUserById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserById", reflect.TypeOf((*MockDatabase)(nil).FindUserById), ctx, id)
}

// FindUserByIdentityNumber mocks base method.
func (m *MockDatabase) FindUserByIdentityNumber(ctx context.Context, identityNumber string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByIdentityNumber", ctx, identityNumber)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByIdentityNumber indicates an expected call of FindUserByIdentityNumber.
func (mr *MockDatabaseMockRecorder) FindUserByIdentityNumber(ctx, identityNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByIdentityNumber", reflect.TypeOf((*MockDatabase)(nil).FindUserByIdentityNumber), ctx, identityNumber)
}

// FindUserPermissions mocks base method.
func (m *MockDatabase) FindUserPermissions(ctx context.Context, id uuid.UUID) ([]models.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserPermissions", ctx, id)
	ret0, _ := ret[0].([]models.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserPermissions indicates an expected call of FindUserPermissions.
func (mr *MockDatabaseMockRecorder) FindUserPermissions(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserPermissions", reflect.TypeOf((*MockDatabase)(nil).FindUserPermissions), ctx, id)
}

// FindUserRoles mocks base method.
func (m *MockDatabase) FindUserRoles(ctx context.Context, id uuid.UUID) ([]models.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserRoles", ctx, id)
	ret0, _ := ret[0].([]models.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserRoles indicates an expected call of FindUserRoles.
func (mr *MockDatabaseMockRecorder) FindUserRoles(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserRoles", reflect.TypeOf((*MockDatabase)(nil).FindUserRoles), ctx, id)
}

// FindUserScopes mocks base method.
func (m *MockDatabase) FindUserScopes(ctx context.Context, id uuid.UUID) ([]models.Scope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserScopes", ctx, id)
	ret0, _ := ret[0].([]models.Scope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserScopes indicates an expected call of FindUserScopes.
func (mr *MockDatabaseMockRecorder) FindUserScopes(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserScopes", reflect.TypeOf((*MockDatabase)(nil).FindUserScopes), ctx, id)
}
